From b57ef96e42537ec8c4bfe9fa9792601e6d866e84 Mon Sep 17 00:00:00 2001
From: Arnie97 <arnie97@gmail.com>
Date: Tue, 25 Jul 2017 20:34:11 +0800
Subject: [PATCH] Simulate a Mifare Classic tag with hardcoded UID.

---
 armsrc/appmain.c | 254 +++----------------------------------------------------
 1 file changed, 14 insertions(+), 240 deletions(-)

diff --git a/armsrc/appmain.c b/armsrc/appmain.c
index 4411a0c..0ed61d9 100644
--- a/armsrc/appmain.c
+++ b/armsrc/appmain.c
@@ -376,16 +376,10 @@ void StandAloneMode()
 {
 	DbpString("Stand-alone mode! No PC necessary.");
 	// Oooh pretty -- notify user we're in elite samy mode now
-	LED(LED_RED,	200);
-	LED(LED_ORANGE, 200);
-	LED(LED_GREEN,	200);
-	LED(LED_ORANGE, 200);
-	LED(LED_RED,	200);
 	LED(LED_ORANGE, 200);
 	LED(LED_GREEN,	200);
-	LED(LED_ORANGE, 200);
 	LED(LED_RED,	200);
-
+	LED(LED_RED2,	200);
 }
 
 #endif
@@ -398,247 +392,27 @@ void StandAloneMode14a()
 	StandAloneMode();
 	FpgaDownloadAndGo(FPGA_BITSTREAM_HF);
 
-	int selected = 0;
-	int playing = 0, iGotoRecord = 0, iGotoClone = 0;
-	int cardRead[OPTS] = {0};
-	uint8_t readUID[10] = {0};
-	uint32_t uid_1st[OPTS]={0};
-	uint32_t uid_2nd[OPTS]={0};
-	uint32_t uid_tmp1 = 0;
-	uint32_t uid_tmp2 = 0;
-	iso14a_card_select_t hi14a_card[OPTS];
-
-	LED(selected + 1, 0);
-
 	for (;;)
 	{
 		usb_poll();
 		WDT_HIT();
-		SpinDelay(300);
-
-		if (iGotoRecord == 1 || cardRead[selected] == 0)
-		{
-			iGotoRecord = 0;
-			LEDsoff();
-			LED(selected + 1, 0);
-			LED(LED_RED2, 0);
-
-			// record
-			Dbprintf("Enabling iso14443a reader mode for [Bank: %u]...", selected);
-			/* need this delay to prevent catching some weird data */
-			SpinDelay(500);
-			/* Code for reading from 14a tag */
-			uint8_t uid[10]  ={0};
-			uint32_t cuid;
-			iso14443a_setup(FPGA_HF_ISO14443A_READER_MOD);
-
-			for ( ; ; )
-			{
-				WDT_HIT();
-				if (BUTTON_PRESS()) {
-					if (cardRead[selected]) {
-						Dbprintf("Button press detected -- replaying card in bank[%d]", selected);
-						break;
-					}
-					else if (cardRead[(selected+1)%OPTS]) {
-						Dbprintf("Button press detected but no card in bank[%d] so playing from bank[%d]", selected, (selected+1)%OPTS);
-						selected = (selected+1)%OPTS;
-						break; // playing = 1;
-					}
-					else {
-						Dbprintf("Button press detected but no stored tag to play. (Ignoring button)");
-						SpinDelay(300);
-					}
-				}
-				if (!iso14443a_select_card(uid, &hi14a_card[selected], &cuid, true, 0))
-					continue;
-				else
-				{
-					Dbprintf("Read UID:"); Dbhexdump(10,uid,0);
-					memcpy(readUID,uid,10*sizeof(uint8_t));
-					uint8_t *dst = (uint8_t *)&uid_tmp1;
-					// Set UID byte order
-					for (int i=0; i<4; i++)
-						dst[i] = uid[3-i];
-					dst = (uint8_t *)&uid_tmp2;
-					for (int i=0; i<4; i++)
-						dst[i] = uid[7-i];
-					if (uid_1st[(selected+1)%OPTS] == uid_tmp1 && uid_2nd[(selected+1)%OPTS] == uid_tmp2) {
-						Dbprintf("Card selected has same UID as what is stored in the other bank. Skipping.");
-					}
-					else {
-						if (uid_tmp2) {
-							Dbprintf("Bank[%d] received a 7-byte UID",selected);
-							uid_1st[selected] = (uid_tmp1)>>8;
-							uid_2nd[selected] = (uid_tmp1<<24) + (uid_tmp2>>8);
-						}
-						else {
-							Dbprintf("Bank[%d] received a 4-byte UID",selected);
-							uid_1st[selected] = uid_tmp1;
-							uid_2nd[selected] = uid_tmp2;
-						}
-						break;
-					}
-				}
-			}
-			Dbprintf("ATQA = %02X%02X",hi14a_card[selected].atqa[0],hi14a_card[selected].atqa[1]);
-			Dbprintf("SAK = %02X",hi14a_card[selected].sak);
-			LEDsoff();
-			LED(LED_GREEN,  200);
-			LED(LED_ORANGE, 200);
-			LED(LED_GREEN,  200);
-			LED(LED_ORANGE, 200);
-
-			LEDsoff();
-			LED(selected + 1, 0);
-
-			// Next state is replay:
-			playing = 1;
-
-			cardRead[selected] = 1;
-		}
-		/* MF Classic UID clone */
-		else if (iGotoClone==1)
-		{
-			iGotoClone=0;
-			LEDsoff();
-			LED(selected + 1, 0);
-			LED(LED_ORANGE, 250);
 
+		SpinDelay(300);
+		LED(LED_GREEN, 0);
+		WDT_HIT();
 
-			// record
-			Dbprintf("Preparing to Clone card [Bank: %x]; uid: %08x", selected, uid_1st[selected]);
-
-			// wait for button to be released
-			while(BUTTON_PRESS())
-			{
-				// Delay cloning until card is in place
-				WDT_HIT();
-			}
-			Dbprintf("Starting clone. [Bank: %u]", selected);
-			// need this delay to prevent catching some weird data
-			SpinDelay(500);
-			// Begin clone function here:
-			/* Example from client/mifarehost.c for commanding a block write for "magic Chinese" cards:
-					UsbCommand c = {CMD_MIFARE_CSETBLOCK, {wantWipe, params & (0xFE | (uid == NULL ? 0:1)), blockNo}};
-					memcpy(c.d.asBytes, data, 16);
-					SendCommand(&c);
-
-					Block read is similar:
-					UsbCommand c = {CMD_MIFARE_CGETBLOCK, {params, 0, blockNo}};
-					We need to imitate that call with blockNo 0 to set a uid.
-
-					The get and set commands are handled in this file:
-					// Work with "magic Chinese" card
-					case CMD_MIFARE_CSETBLOCK:
-						MifareCSetBlock(c->arg[0], c->arg[1], c->arg[2], c->d.asBytes);
-						break;
-					case CMD_MIFARE_CGETBLOCK:
-						MifareCGetBlock(c->arg[0], c->arg[1], c->arg[2], c->d.asBytes);
-						break;
-
-				mfCSetUID provides example logic for UID set workflow:
-					-Read block0 from card in field with MifareCGetBlock()
-					-Configure new values without replacing reserved bytes
-							memcpy(block0, uid, 4); // Copy UID bytes from byte array
-							// Mifare UID BCC
-							block0[4] = block0[0]^block0[1]^block0[2]^block0[3]; // BCC on byte 5
-							Bytes 5-7 are reserved SAK and ATQA for mifare classic
-					-Use mfCSetBlock(0, block0, oldUID, wantWipe, CSETBLOCK_SINGLE_OPER) to write it
-			*/
-			uint8_t oldBlock0[16] = {0}, newBlock0[16] = {0}, testBlock0[16] = {0};
-			// arg0 = Flags == CSETBLOCK_SINGLE_OPER=0x1F, arg1=returnSlot, arg2=blockNo
-			MifareCGetBlock(0x3F, 1, 0, oldBlock0);
-			if (oldBlock0[0] == 0 && oldBlock0[0] == oldBlock0[1]  && oldBlock0[1] == oldBlock0[2] && oldBlock0[2] == oldBlock0[3]) {
-				Dbprintf("No changeable tag detected. Returning to replay mode for bank[%d]", selected);
-				playing = 1;
-			}
-			else {
-				Dbprintf("UID from target tag: %02X%02X%02X%02X", oldBlock0[0],oldBlock0[1],oldBlock0[2],oldBlock0[3]);
-				memcpy(newBlock0,oldBlock0,16);
-				// Copy uid_1st for bank (2nd is for longer UIDs not supported if classic)
-
-				newBlock0[0] = uid_1st[selected]>>24;
-				newBlock0[1] = 0xFF & (uid_1st[selected]>>16);
-				newBlock0[2] = 0xFF & (uid_1st[selected]>>8);
-				newBlock0[3] = 0xFF & (uid_1st[selected]);
-				newBlock0[4] = newBlock0[0]^newBlock0[1]^newBlock0[2]^newBlock0[3];
-				// arg0 = needWipe, arg1 = workFlags, arg2 = blockNo, datain
-				MifareCSetBlock(0, 0xFF,0, newBlock0);
-				MifareCGetBlock(0x3F, 1, 0, testBlock0);
-				if (memcmp(testBlock0,newBlock0,16)==0)
-				{
-					DbpString("Cloned successfull!");
-					cardRead[selected] = 0; // Only if the card was cloned successfully should we clear it
-					playing = 0;
-					iGotoRecord = 1;
-					selected = (selected+1) % OPTS;
-				}
-				else {
-					Dbprintf("Clone failed. Back to replay mode on bank[%d]", selected);
-					playing = 1;
-				}
-			}
-			LEDsoff();
-			LED(selected + 1, 0);
-
-		}
-		// Change where to record (or begin playing)
-		else if (playing==1) // button_pressed == BUTTON_SINGLE_CLICK && cardRead[selected])
-		{
+		int button_action = BUTTON_HELD(1000);
+		if (button_action == 0) { // No button action, proceed with sim
+			uint8_t data[512] = {0}; // in case there is a read command received we shouldn't break
+			uint32_t uid[2] = {0x4BA80844, 0};
+			Dbprintf("Simulating ISO14443a Mifare Classic with uid[0]: %08x, uid[1]: %x", uid[0], uid[1]);
+			SimulateIso14443aTag(1, uid[0], uid[1], data);
+			Dbprintf("Quit standalone mode.");
 			LEDsoff();
-			LED(selected + 1, 0);
 
-			// Begin transmitting
-			if (playing)
-			{
-				LED(LED_GREEN, 0);
-				DbpString("Playing");
-				for ( ; ; ) {
-					WDT_HIT();
-					int button_action = BUTTON_HELD(1000);
-					if (button_action == 0) { // No button action, proceed with sim
-						uint8_t data[512] = {0}; // in case there is a read command received we shouldn't break
-						Dbprintf("Simulating ISO14443a tag with uid[0]: %08x, uid[1]: %08x [Bank: %u]", uid_1st[selected],uid_2nd[selected],selected);
-						if (hi14a_card[selected].sak == 8 && hi14a_card[selected].atqa[0] == 4 && hi14a_card[selected].atqa[1] == 0) {
-							DbpString("Mifare Classic");
-							SimulateIso14443aTag(1,uid_1st[selected], uid_2nd[selected], data); // Mifare Classic
-						}
-						else if (hi14a_card[selected].sak == 0 && hi14a_card[selected].atqa[0] == 0x44 && hi14a_card[selected].atqa[1] == 0) {
-							DbpString("Mifare Ultralight");
-							SimulateIso14443aTag(2,uid_1st[selected],uid_2nd[selected],data); // Mifare Ultralight
-						}
-						else if (hi14a_card[selected].sak == 20 && hi14a_card[selected].atqa[0] == 0x44 && hi14a_card[selected].atqa[1] == 3) {
-							DbpString("Mifare DESFire");
-							SimulateIso14443aTag(3,uid_1st[selected],uid_2nd[selected],data); // Mifare DESFire
-						}
-						else {
-							Dbprintf("Unrecognized tag type -- defaulting to Mifare Classic emulation");
-							SimulateIso14443aTag(1,uid_1st[selected], uid_2nd[selected], data);
-						}
-					}
-					else if (button_action == BUTTON_SINGLE_CLICK) {
-						selected = (selected + 1) % OPTS;
-						Dbprintf("Done playing. Switching to record mode on bank %d",selected);
-						iGotoRecord = 1;
-						break;
-					}
-					else if (button_action == BUTTON_HOLD) {
-						Dbprintf("Playtime over. Begin cloning...");
-						iGotoClone = 1;
-						break;
-					}
-					WDT_HIT();
-				}
-
-				/* We pressed a button so ignore it here with a delay */
-				SpinDelay(300);
-				LEDsoff();
-				LED(selected + 1, 0);
-			}
-			else
-				while(BUTTON_PRESS())
-					WDT_HIT();
+			/* We pressed a button so ignore it here with a delay */
+			SpinDelay(300);
+			return;
 		}
 	}
 }
-- 
2.12.2.windows.2

